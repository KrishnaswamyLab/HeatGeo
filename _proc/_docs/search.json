[
  {
    "objectID": "cheb.html",
    "href": "cheb.html",
    "title": "heatgeo",
    "section": "",
    "text": "Functions for the Chebyshev approximation\n\n\n\nexpm_multiply\n\n expm_multiply (L, X, phi, tau, K=None, err=1e-32)\n\n\n\n\ncompute_chebychev_coeff_all\n\n compute_chebychev_coeff_all (phi, tau, K)\n\nCompute the K+1 Chebychev coefficients for our functions.\n\n\n\nreverse_bound\n\n reverse_bound (f, phi, x, tau, err)\n\nReturns the minimal K such that f(phi, x, tau, K) &lt;= err.\n\n\n\nget_bound_bergamaschi_specific\n\n get_bound_bergamaschi_specific (phi, x, tau, K)\n\n\n\n\nget_bound_bergamaschi_generic\n\n get_bound_bergamaschi_generic (phi, x, tau, K)\n\n\n\n\nE\n\n E (K, C)\n\n\n\n\nget_bound_eta_specific\n\n get_bound_eta_specific (phi, x, tau, K)\n\n\n\n\nget_bound_eta_generic\n\n get_bound_eta_generic (phi, x, tau, K)\n\n\n\n\nget_bound_eps_generic\n\n get_bound_eps_generic (phi, x, tau, K)\n\n\n\n\ng\n\n g (K, C)"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "foo\n\n foo ()"
  },
  {
    "objectID": "graph.html",
    "href": "graph.html",
    "title": "Graph selection",
    "section": "",
    "text": "get_umap_graph\n\n get_umap_graph (X, knn=5, **kwargs)\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nX\n\n\n\n\n\nknn\nint\n5\nknn default to 15 in UMAP\n\n\nkwargs\n\n\n\n\n\n\n\n\n\nget_scanpy_graph\n\n get_scanpy_graph (X, knn=5, **kwargs)\n\n\n\n\nget_alpha_decay_graph\n\n get_alpha_decay_graph (X, knn:int=5, decay:float=40.0,\n                        anisotropy:float=0, n_pca:int=None, **kwargs)\n\n\n\n\nget_knn_graph\n\n get_knn_graph (X, knn=5, **kwargs)\n\n\n\n\ndiff_aff\n\n diff_aff (graph)\n\nCompute the diffusion affinity for a pygsp graph.\n\n\n\nkernel_degree\n\n kernel_degree (graph)\n\nCompute the kernel degree for a pygsp graph.\n\n\n\ndiff_op\n\n diff_op (graph)\n\nCompute the diffusion operator for a pygsp graph."
  },
  {
    "objectID": "embedding.html",
    "href": "embedding.html",
    "title": "Heat Geo embedding",
    "section": "",
    "text": "ShortestPath\n\n ShortestPath (knn:int, anisotropy:int=0, decay:int=40, n_pca:int=40,\n               graph_type:str='alpha', **kwargs)\n\nBase class for embedding methods.\n\n\n\nDiffusionMap\n\n DiffusionMap (knn:int=0, decay:int=40, n_pca:int=40, tau:float=1,\n               emb_dim:int=2, anisotropy:int=0, graph_type:str='alpha',\n               **kwargs)\n\nBase class for embedding methods.\n\n\n\nRandWalkGeo\n\n RandWalkGeo (knn:int, anisotropy:int=0, decay:int=40, n_pca:int=40,\n              tau:int=10, emb_dim:int=2, filter_method:str='exact',\n              order:int=32, lap_type:str='normalized',\n              log_normalize:bool=False, scale_factor:float=1,\n              denoising:bool=False, n_ref:int=50, n_svd:int=50,\n              graph_type:str='alpha')\n\nBase class for embedding methods.\n\n\n\nnew_heatgeo\n\n new_heatgeo (knn:int, anisotropy:int=0, decay:int=40, n_pca:int=40,\n              tau:int=10, emb_dim:int=2, filter_method:str='pygsp',\n              order:int=32, lap_type:str='normalized', tau_min:float=0.1,\n              tau_max:float=200, n_tau:int=1, log_normalize:bool=False,\n              scale_factor:float=1.0, denoising:bool=False, n_ref:int=50,\n              n_svd:int=50, graph_type:str='alpha',\n              truncation_type:Optional[str]=None,\n              truncation_arg:Optional[str]=None,\n              treshold_type:Optional[str]=None, harnack_regul:float=0,\n              norm_treshold:bool=True,\n              mds_weights_type:Optional[str]=None,\n              mds_weights_args:Optional[str]=None,\n              denoise_regul:float=0.0)\n\nBase class for embedding methods.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nknn\nint\n\n\n\n\nanisotropy\nint\n0\n\n\n\ndecay\nint\n40\n\n\n\nn_pca\nint\n40\n\n\n\ntau\nint\n10\n\n\n\nemb_dim\nint\n2\n\n\n\nfilter_method\nstr\npygsp\n\n\n\norder\nint\n32\n\n\n\nlap_type\nstr\nnormalized\n\n\n\ntau_min\nfloat\n0.1\n\n\n\ntau_max\nfloat\n200\n\n\n\nn_tau\nint\n1\n\n\n\nlog_normalize\nbool\nFalse\n\n\n\nscale_factor\nfloat\n1.0\n\n\n\ndenoising\nbool\nFalse\n\n\n\nn_ref\nint\n50\n\n\n\nn_svd\nint\n50\n\n\n\ngraph_type\nstr\nalpha\n\n\n\ntruncation_type\nOptional\nNone\n\n\n\ntruncation_arg\nOptional\nNone\n\n\n\ntreshold_type\nOptional\nNone\n“min” or “max”\n\n\nharnack_regul\nfloat\n0\nHarnack regularization parameter, between 0 and 1.\n\n\nnorm_treshold\nbool\nTrue\n\n\n\nmds_weights_type\nOptional\nNone\n\n\n\nmds_weights_args\nOptional\nNone\n“heat_kernel”, “inv_dist”,“gaussian_dist”\n\n\ndenoise_regul\nfloat\n0.0\n\n\n\n\n\n\n\nBaseEmb\n\n BaseEmb (knn:int, anisotropy:int=0, decay:int=40, n_pca:int=40,\n          tau:Union[int,str]='auto', emb_dim:int=2, order:int=32,\n          random_state:int=42, scale_factor:float=2.0, tau_min:float=0.1,\n          tau_max:float=1.0, n_tau:int=1, n_landmarks:Optional[int]=None,\n          solver:str='sgd', lap_type:str='normalized',\n          filter_method:str='pygsp', graph_type:str='alpha',\n          mds_weights:Optional[str]=None)\n\nBase class for embedding methods.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nknn\nint\n\nnumber of nearest neighbors\n\n\nanisotropy\nint\n0\nanisotropy parameter in the diffusion kernel\n\n\ndecay\nint\n40\ndecay parameter in the diffusion kernel\n\n\nn_pca\nint\n40\nnumber of principal components to use for knn estimation\n\n\ntau\nUnion\nauto\ndiffusion time\n\n\nemb_dim\nint\n2\nembedding dimension\n\n\norder\nint\n32\norder of the Chebyshev approximation, or steps in Euler’s method\n\n\nrandom_state\nint\n42\nrandom state for the embedding\n\n\nscale_factor\nfloat\n2.0\npower when computing the distance matrix\n\n\ntau_min\nfloat\n0.1\nminimum diffusion time\n\n\ntau_max\nfloat\n1.0\nmaximum diffusion time\n\n\nn_tau\nint\n1\nnumber of diffusion times for entropy.\n\n\nn_landmarks\nOptional\nNone\nnumber of landmarks to summarize the data\n\n\nsolver\nstr\nsgd\nsolver to use for MDS\n\n\nlap_type\nstr\nnormalized\ntype of Laplacian to use for the graph \"normalized\" or \"combinatorial\"\n\n\nfilter_method\nstr\npygsp\nmethod to use for Heat approx. \"pygsp\" or \"euler\", \"mar\"\n\n\ngraph_type\nstr\nalpha\ntype of graph to use for the embedding \"knn\" or \"alpha\" or scanpy\n\n\nmds_weights\nOptional\nNone\nweights to use for MDS"
  },
  {
    "objectID": "heat_filter.html",
    "href": "heat_filter.html",
    "title": "Heat kernel approximations",
    "section": "",
    "text": "/home/mila/g/guillaume.huguet/.conda/envs/metric_emb/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Arguments\n  else: warn(msg)\n\n\nHeat_filter\n\n Heat_filter (graph, tau, order, method='euler')\n\nWrapper for the approximation of the heat kernel.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\ngraph\n\n\n\n\n\ntau\n\n\n\n\n\norder\n\n\n\n\n\nmethod\nstr\neuler\n\n\n\nReturns\nCallable that takes as input a vector b and returns its diffusion.\n\n\n\n\n\n\n\n\nHeat_Euler\n\n Heat_Euler (L, t, K)\n\nImplicit Euler discretization of the heat equation using Chelesky prefactorization."
  },
  {
    "objectID": "mds.html",
    "href": "mds.html",
    "title": "MDS",
    "section": "",
    "text": "embed_MDS\n\n embed_MDS (X, ndim=2, seed=2, solver='sgd', how='metric',\n            input_is_dist=True, distance_metric='euclidean',\n            mds_weights=None)\n\n\n\n\nsmacof\n\n smacof (D, n_components=2, metric=True, init=None, random_state=None,\n         verbose=0, max_iter=3000, eps=1e-06, n_jobs=1)\n\nMetric and non-metric MDS using SMACOF Parameters ———- D : array-like, shape=[n_samples, n_samples] pairwise distances n_components : int, optional (default: 2) number of dimensions in which to embed D metric : bool, optional (default: True) Use metric MDS. If False, uses non-metric MDS init : array-like or None, optional (default: None) Initialization state random_state : int, RandomState or None, optional (default: None) numpy random state verbose : int or bool, optional (default: 0) verbosity max_iter : int, optional (default: 3000) maximum iterations eps : float, optional (default: 1e-6) stopping criterion Returns ——- Y : array-like, shape=[n_samples, n_components] embedded data\n\n\n\nsgd\n\n sgd (D, w=None, n_components=2, random_state=None, init=None)\n\nMetric MDS using stochastic gradient descent Parameters ———- D : array-like, shape=[n_samples, n_samples] pairwise distances n_components : int, optional (default: 2) number of dimensions in which to embed D random_state : int or None, optional (default: None) numpy random state init : array-like or None Initialization algorithm or state to use for MMDS Returns ——- Y : array-like, embedded data [n_sample, ndim]\n\n\n\nclassic\n\n classic (D, n_components=2, random_state=None)\n\nFast CMDS using random SVD Parameters ———- D : array-like, shape=[n_samples, n_samples] pairwise distances n_components : int, optional (default: 2) number of dimensions in which to embed D random_state : int, RandomState or None, optional (default: None) numpy random state Returns ——- Y : array-like, embedded data [n_sample, ndim]"
  },
  {
    "objectID": "utils.html",
    "href": "utils.html",
    "title": "Utils functions",
    "section": "",
    "text": "get_optimal_heat\n\n get_optimal_heat (emb_op, tau_max:float=50, n_tau:int=20)\n\nSelect the optimal tau for the heat kernel.\nOptimal tau is found using Checbyshev approximation.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nemb_op\n\n\n\n\n\ntau_max\nfloat\n50\n\n\n\nn_tau\nint\n20\n\n\n\nReturns\nH: np.array (n_nodes, n_nodes)\n\nHeat kernel with optimal tau.\n\n\n\n/home/mila/g/guillaume.huguet/.conda/envs/metric_emb/lib/python3.10/site-packages/fastcore/docscrape.py:225: UserWarning: Unknown section Argurments\n  else: warn(msg)\n\n\n\ntime_entropy\n\n time_entropy (H)\n\n\n\n\ninterpolate\n\n interpolate (x0, x1, n_steps)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "heatgeo",
    "section": "",
    "text": "WIP"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "heatgeo",
    "section": "Install",
    "text": "Install\nTODO req etc..\npip install heatgeo\n\nHow to use\nThe directory experiments contains code to reproduce our main results. We used hydra, the parameters can be changed in config or directly in the CLI. In notebooks, we provide examples on toy datasets."
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "heatgeo",
    "section": "How to use",
    "text": "How to use\nFill me in please! Don’t forget code examples:\n\n1+1\n\n2"
  },
  {
    "objectID": "embedding.html#parameters",
    "href": "embedding.html#parameters",
    "title": "Heat Geo embedding",
    "section": "Parameters",
    "text": "Parameters\nknn Number of nearest neighbors to use for the graph. anisotropy Anisotropy parameter for the graph. decay Decay parameter for the kernel. n_pca Number of principal components to use for knn estimation. tau Diffusion time of the diffusion operator on the graph. emb_dim Dimension of the embedding. order Order of the Chebyshev approximation. random_state Random state for the embedding. scale_factor Power when computing the distance matrix. tau_min Minimum diffusion time for the diffusion operator. tau_max Maximum diffusion time for the diffusion operator. n_tau Number of diffusion times for the multiscale diffusion operator. n_landmarks Number of landmarks to summarize the data. solver Solver to use for MDS, \"sgd\" or \"smacof\". lap_type Type of Laplacian to use for the graph \"normalized\" or \"combinatorial\". filter_method Method to use for Heat approx. \"pygsp\" or \"euler\", \"mar\". graph_type Type of graph to use for the embedding \"knn\" or \"alpha\" or scanpy.\n\n\nDiffusionMap\n\n DiffusionMap (knn:int=0, decay:int=40, n_pca:int=40, tau:float=1,\n               emb_dim:int=2, anisotropy:int=0, graph_type:str='alpha',\n               **kwargs)\n\nBase class for embedding methods."
  },
  {
    "objectID": "embedding.html#parameters-1",
    "href": "embedding.html#parameters-1",
    "title": "Heat Geo embedding",
    "section": "Parameters",
    "text": "Parameters\nknn Number of nearest neighbors to use for the graph. anisotropy Anisotropy parameter for the graph. decay Decay parameter for the kernel. n_pca Number of principal components to use for knn estimation. tau Diffusion time of the diffusion operator on the graph. emb_dim Dimension of the embedding. order Order of the Chebyshev approximation. random_state Random state for the embedding. scale_factor Power when computing the distance matrix. tau_min Minimum diffusion time for the diffusion operator. tau_max Maximum diffusion time for the diffusion operator. n_tau Number of diffusion times for the multiscale diffusion operator. n_landmarks Number of landmarks to summarize the data. solver Solver to use for MDS, \"sgd\" or \"smacof\". lap_type Type of Laplacian to use for the graph \"normalized\" or \"combinatorial\". filter_method Method to use for Heat approx. \"pygsp\" or \"euler\", \"mar\". graph_type Type of graph to use for the embedding \"knn\" or \"alpha\" or scanpy.\n\n\nRandWalkGeo\n\n RandWalkGeo (knn:int, anisotropy:int=0, decay:int=40, n_pca:int=40,\n              tau:int=10, emb_dim:int=2, filter_method:str='exact',\n              order:int=32, lap_type:str='normalized',\n              log_normalize:bool=False, scale_factor:float=1,\n              denoising:bool=False, n_ref:int=50, n_svd:int=50,\n              graph_type:str='alpha')\n\nBase class for embedding methods."
  },
  {
    "objectID": "embedding.html#parameters-2",
    "href": "embedding.html#parameters-2",
    "title": "Heat Geo embedding",
    "section": "Parameters",
    "text": "Parameters\nknn Number of nearest neighbors to use for the graph. anisotropy Anisotropy parameter for the graph. decay Decay parameter for the kernel. n_pca Number of principal components to use for knn estimation. tau Diffusion time of the diffusion operator on the graph. emb_dim Dimension of the embedding. order Order of the Chebyshev approximation. random_state Random state for the embedding. scale_factor Power when computing the distance matrix. tau_min Minimum diffusion time for the diffusion operator. tau_max Maximum diffusion time for the diffusion operator. n_tau Number of diffusion times for the multiscale diffusion operator. n_landmarks Number of landmarks to summarize the data. solver Solver to use for MDS, \"sgd\" or \"smacof\". lap_type Type of Laplacian to use for the graph \"normalized\" or \"combinatorial\". filter_method Method to use for Heat approx. \"pygsp\" or \"euler\", \"mar\". graph_type Type of graph to use for the embedding \"knn\" or \"alpha\" or scanpy.\n\n\nnew_heatgeo\n\n new_heatgeo (knn:int, anisotropy:int=0, decay:int=40, n_pca:int=40,\n              tau:int=10, emb_dim:int=2, filter_method:str='pygsp',\n              order:int=32, lap_type:str='normalized', tau_min:float=0.1,\n              tau_max:float=200, n_tau:int=1, log_normalize:bool=False,\n              scale_factor:float=1.0, denoising:bool=False, n_ref:int=50,\n              n_svd:int=50, graph_type:str='alpha',\n              truncation_type:Optional[str]=None,\n              truncation_arg:Optional[str]=None,\n              treshold_type:Optional[str]=None, harnack_regul:float=0,\n              norm_treshold:bool=True,\n              mds_weights_type:Optional[str]=None,\n              mds_weights_args:Optional[str]=None,\n              denoise_regul:float=0.0)\n\nBase class for embedding methods."
  },
  {
    "objectID": "embedding.html#parameters-3",
    "href": "embedding.html#parameters-3",
    "title": "Heat Geo embedding",
    "section": "Parameters",
    "text": "Parameters\nknn Number of nearest neighbors to use for the graph. anisotropy Anisotropy parameter for the graph. decay Decay parameter for the kernel. n_pca Number of principal components to use for knn estimation. tau Diffusion time of the diffusion operator on the graph. emb_dim Dimension of the embedding. order Order of the Chebyshev approximation. random_state Random state for the embedding. scale_factor Power when computing the distance matrix. tau_min Minimum diffusion time for the diffusion operator. tau_max Maximum diffusion time for the diffusion operator. n_tau Number of diffusion times for the multiscale diffusion operator. n_landmarks Number of landmarks to summarize the data. solver Solver to use for MDS, \"sgd\" or \"smacof\". lap_type Type of Laplacian to use for the graph \"normalized\" or \"combinatorial\". filter_method Method to use for Heat approx. \"pygsp\" or \"euler\", \"mar\". graph_type Type of graph to use for the embedding \"knn\" or \"alpha\" or scanpy.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nknn\nint\n\n\n\n\nanisotropy\nint\n0\n\n\n\ndecay\nint\n40\n\n\n\nn_pca\nint\n40\n\n\n\ntau\nint\n10\n\n\n\nemb_dim\nint\n2\n\n\n\nfilter_method\nstr\npygsp\n\n\n\norder\nint\n32\n\n\n\nlap_type\nstr\nnormalized\n\n\n\ntau_min\nfloat\n0.1\n\n\n\ntau_max\nfloat\n200\n\n\n\nn_tau\nint\n1\n\n\n\nlog_normalize\nbool\nFalse\n\n\n\nscale_factor\nfloat\n1.0\n\n\n\ndenoising\nbool\nFalse\n\n\n\nn_ref\nint\n50\n\n\n\nn_svd\nint\n50\n\n\n\ngraph_type\nstr\nalpha\n\n\n\ntruncation_type\nOptional\nNone\n\n\n\ntruncation_arg\nOptional\nNone\n\n\n\ntreshold_type\nOptional\nNone\n“min” or “max”\n\n\nharnack_regul\nfloat\n0\nHarnack regularization parameter, between 0 and 1.\n\n\nnorm_treshold\nbool\nTrue\n\n\n\nmds_weights_type\nOptional\nNone\n\n\n\nmds_weights_args\nOptional\nNone\n“heat_kernel”, “inv_dist”,“gaussian_dist”\n\n\ndenoise_regul\nfloat\n0.0\n\n\n\n\n\n\nBaseEmb\n\n BaseEmb (knn:int, anisotropy:int=0, decay:int=40, n_pca:int=40,\n          tau:Union[int,str]='auto', emb_dim:int=2, order:int=32,\n          random_state:int=42, scale_factor:float=2.0, tau_min:float=0.1,\n          tau_max:float=1.0, n_tau:int=1, n_landmarks:Optional[int]=None,\n          solver:str='sgd', lap_type:str='normalized',\n          filter_method:str='pygsp', graph_type:str='alpha',\n          mds_weights:Optional[str]=None)\n\nBase class for embedding methods."
  },
  {
    "objectID": "embedding.html#parameters-4",
    "href": "embedding.html#parameters-4",
    "title": "Heat Geo embedding",
    "section": "Parameters",
    "text": "Parameters\nknn Number of nearest neighbors to use for the graph. anisotropy Anisotropy parameter for the graph. decay Decay parameter for the kernel. n_pca Number of principal components to use for knn estimation. tau Diffusion time of the diffusion operator on the graph. emb_dim Dimension of the embedding. order Order of the Chebyshev approximation. random_state Random state for the embedding. scale_factor Power when computing the distance matrix. tau_min Minimum diffusion time for the diffusion operator. tau_max Maximum diffusion time for the diffusion operator. n_tau Number of diffusion times for the multiscale diffusion operator. n_landmarks Number of landmarks to summarize the data. solver Solver to use for MDS, \"sgd\" or \"smacof\". lap_type Type of Laplacian to use for the graph \"normalized\" or \"combinatorial\". filter_method Method to use for Heat approx. \"pygsp\" or \"euler\", \"mar\". graph_type Type of graph to use for the embedding \"knn\" or \"alpha\" or scanpy."
  }
]